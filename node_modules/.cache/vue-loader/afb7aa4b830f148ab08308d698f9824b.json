{"remainingRequest":"C:\\work\\竞猜可换色板\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\work\\竞猜可换色板\\src\\views\\RankMatch.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\work\\竞猜可换色板\\src\\views\\RankMatch.vue","mtime":1605599793563},{"path":"C:\\work\\竞猜可换色板\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\work\\竞猜可换色板\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\work\\竞猜可换色板\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport NavBottom from \"@/components/Main/NavBottom.vue\";\r\nimport back from \"../components/Botton/back.vue\";\r\nimport model from \"../components/model\";\r\nimport { betSuccess } from \"@/utils/medias\";\r\nimport FlowAd from \"@/components/FlowAd\";\r\nimport {\r\n  apiGetBetResponse,\r\n  apiBet,\r\n  apiGetMemberMatchViewModel\r\n} from \"../api/match.js\";\r\nimport { apiGetFlowAdByType } from \"@/api/FlowAd.js\";\r\nexport default {\r\n  watch: {\r\n    betnum: function() {\r\n      if (\r\n        this.betinfo.PlayType == 3 ||\r\n        this.betinfo.PlayType == 4 ||\r\n        this.betinfo.PlayType == 5 ||\r\n        this.betinfo.PlayType == 6\r\n      ) {\r\n        this.money = (this.betnum * this.betinfo.OddsValue).toFixed(2);\r\n      } else {\r\n        this.money = (\r\n          this.betnum * this.betinfo.OddsValue -\r\n          this.betnum\r\n        ).toFixed(2);\r\n      }\r\n      this.rangeValue = parseInt(this.betnum);\r\n    }\r\n  },\r\n  components: {\r\n    NavBottom,\r\n    back,\r\n    model,\r\n    FlowAd\r\n  },\r\n  created() {\r\n    this.getMatchPlay();\r\n    this.getrankmatchinfo();\r\n    this.cycling();\r\n  },\r\n  data() {\r\n    return {\r\n      tab1: true,\r\n      tab2: false,\r\n      tab3: false,\r\n\r\n      show: false,\r\n      showbet: false,\r\n      betnum: 0,\r\n      rangeValue: 0,\r\n      rangeMaxVal: 0,\r\n      money: \"\",\r\n      playtype: 0,\r\n      playId: \"\",\r\n      betinfo: \"\",\r\n      rankinfo: \"\",\r\n      fastnum: \"\",\r\n      IsOddsChange: false,\r\n      lastOdds: \"\",\r\n      newOdds: \"\",\r\n      timer: {\r\n        timer1: \"\",\r\n        timer2: \"\",\r\n        timer3: \"\"\r\n      },\r\n      countDownTimer: \"\",\r\n      countDownTime: 30,\r\n      qualifyingMinBet: 1,\r\n      isOpenAd: false,\r\n      adTypeId: 0,\r\n      isFinished: false\r\n    };\r\n  },\r\n  methods: {\r\n    fastbet(id) {\r\n      this.fastnum = id;\r\n      this.betnum = id;\r\n    },\r\n    getrankmatchinfo() {\r\n      let data = {\r\n        matchId: this.$store.state.match.MatchId\r\n      };\r\n      apiGetMemberMatchViewModel(data, true).then(res => {\r\n        this.rankinfo = res;\r\n      });\r\n    },\r\n    gojump(id) {\r\n      this.$router.push(\"/matchmore\");\r\n    },\r\n    //关闭下注\r\n    closedialog() {\r\n      this.showbet = false;\r\n    },\r\n\r\n    //下注界面\r\n    showBetFn(id) {\r\n      this.betnum = 0;\r\n      // if (id > 0) {\r\n      //   this.showbet = true;\r\n      // }\r\n      this.playId = id;\r\n      if (this.playId == -1) {\r\n        return;\r\n      }\r\n      let data = {\r\n        playId: id,\r\n        betType: 1\r\n      };\r\n      apiGetBetResponse(data, true).then(res => {\r\n        if (res.Code === 600) {\r\n          this.$message({\r\n            message: res.Message,\r\n            duration: 3000,\r\n            type: \"error\",\r\n            center: true\r\n          });\r\n        } else {\r\n          this.showbet = true;\r\n\r\n          this.betinfo = res;\r\n          // 上次的舊賠率\r\n          this.lastOdds = this.betinfo.OddsValue;\r\n          // 投注金額預設最低投注金額\r\n          this.betnum = this.qualifyingMinBet;\r\n          this.rangeValue = this.betnum;\r\n\r\n          // 判斷最大單筆投注金額回傳是否為-1 如是拉桿的最大值為10000\r\n          if (res.MaxBetIntegral === -1) this.rangeMaxVal = 10000;\r\n          else this.rangeMaxVal = res.MaxBetIntegral;\r\n\r\n          // 判斷玩家餘額大於最大可投注額時，滾動條最大值設為最大可投注額\r\n          if (this.betinfo.AvailableIntegral > this.rangeMaxVal) {\r\n            this.rangeMaxVal = 10000;\r\n            this.isDisable = false;\r\n            return;\r\n          }\r\n          // 判斷玩家餘額小於最小可投注額時，指针放置在开始位置显示最小可投注额 且不可拖动\r\n          if (this.betinfo.AvailableIntegral < this.betinfo.MinBetIntegral) {\r\n            this.isDisable = true;\r\n            return;\r\n          }\r\n          // 判斷玩家餘額小於最大可投注額時，滾動條最大值設為玩家餘額\r\n          if (this.betinfo.AvailableIntegral < this.rangeMaxVal) {\r\n            this.rangeMaxVal = this.betinfo.AvailableIntegral;\r\n            this.isDisable = false;\r\n            return;\r\n          }\r\n        }\r\n      });\r\n    },\r\n    changeRangeVal() {\r\n      this.betnum = this.rangeValue;\r\n\r\n      let tooltip = document.querySelector(\".slide-tooltip\");\r\n      let rangeBtn = document.querySelector(\".el-slider__bar\");\r\n\r\n      let tooltipWidth = tooltip.getBoundingClientRect().width; // 提示框最正確的寬度\r\n      let rangeBtnOffset = rangeBtn.offsetWidth; // 拖動拉桿時拉桿條的偏移量\r\n      let rangeBtnOffsetParent = rangeBtn.offsetParent.offsetLeft; // 拉桿條離父層左邊(父層padding-left)的偏移量\r\n\r\n      let tolerance = tooltipWidth / 2 + (rangeBtnOffsetParent - tooltipWidth); // 公差\r\n      if (!this.isrunTwice) {\r\n        tooltip.style.left = tolerance + \"px\";\r\n        this.isrunTwice = true;\r\n      } else {\r\n        tooltip.style.left = rangeBtnOffset + tolerance + \"px\";\r\n      }\r\n    },\r\n    //投注金额\r\n    addbet() {\r\n      this.betnum = this.betnum + 1;\r\n    },\r\n    losebet() {\r\n      if (this.betnum == 0) {\r\n        return;\r\n      }\r\n      this.betnum = this.betnum - 1;\r\n    },\r\n    //可赢金额\r\n    getmoney1() {\r\n      // this.money = this.betnum * this.betinfo.OddsValue;\r\n      // this.money = this.money.toFixed(2);\r\n    },\r\n    // 點擊下注時判斷\r\n    betClick() {\r\n      this.newChangeOdds().then(() => {\r\n        // 如果兩個賠率不同\r\n        if (this.lastOdds !== this.newOdds) {\r\n          this.showbet = false;\r\n          this.IsOddsChange = true;\r\n          this.getMatchPlay();\r\n        } else {\r\n          this.bet();\r\n        }\r\n      });\r\n    },\r\n    //下注\r\n    async bet() {\r\n      let data = {\r\n        playId: this.playId,\r\n        betIntegral: this.betnum,\r\n        betType: 2\r\n      };\r\n      if (this.betnum >= 1) {\r\n        await apiBet(data, true).then(res => {\r\n          if (res.IsBetSucceed) {\r\n            this.$message({\r\n              message: this.$t(\"BettingSuccess\"),\r\n              duration: 2500,\r\n              type: \"success\",\r\n              center: true\r\n            });\r\n            // this.Alert.showMsg(\"下注成功\", \"success\", 2500, true, true);\r\n            this.showbet = false;\r\n            this.getrankmatchinfo();\r\n            this.fastnum = \"\";\r\n            // 下注成功音效\r\n            betSuccess.play();\r\n            // 彈出廣告\r\n            this.adTypeId = 2;\r\n            let data = {\r\n              flowAdTypeId: this.adTypeId\r\n            };\r\n            apiGetFlowAdByType(data, true).then(res => {\r\n              if (Object.keys(res.Data).length > 0) {\r\n                this.isOpenAd = true;\r\n              } else {\r\n                this.isOpenAd = false;\r\n              }\r\n            });\r\n            this.isFinished = false;\r\n          } else if (res.Code == 600) {\r\n            this.$message({\r\n              message: res.Message,\r\n              duration: 1000,\r\n              type: \"error\",\r\n              center: true\r\n            });\r\n            if (res.Message == \"余额不足\") {\r\n              // 彈出廣告\r\n              setTimeout(() => {\r\n                this.isOpenAd = true;\r\n                this.adTypeId = 2;\r\n              }, 1000);\r\n              this.showbet = false;\r\n            }\r\n          }\r\n        });\r\n      } else {\r\n        this.$message.error(\"投注金额需要大于1元\");\r\n      }\r\n      // 刷新API\r\n      this.getMatchPlay();\r\n    },\r\n    //获取赛事玩法\r\n    getMatchPlay() {\r\n      this.$store.dispatch(\"asyncGetMatchplay\", {\r\n        id: this.playtype\r\n      });\r\n    },\r\n    tabshow1(id) {\r\n      this.$store.commit(\"uploading\", true);\r\n      this.playtype = id;\r\n      this.tab1 = true;\r\n      this.tab2 = false;\r\n      this.tab3 = false;\r\n      this.getMatchPlay();\r\n      this.cycling();\r\n    },\r\n    tabshow2(id) {\r\n      this.$store.commit(\"uploading\", true);\r\n      this.playtype = id;\r\n      this.tab1 = false;\r\n      this.tab2 = true;\r\n      this.tab3 = false;\r\n      this.getMatchPlay();\r\n      this.cycling();\r\n    },\r\n    tabshow3(id) {\r\n      this.$store.commit(\"uploading\", true);\r\n      this.playtype = id;\r\n      this.tab1 = false;\r\n      this.tab2 = false;\r\n      this.tab3 = true;\r\n      this.getMatchPlay();\r\n      this.cycling();\r\n    },\r\n\r\n    cycling() {\r\n      // 早盤\r\n      if (this.tab1) {\r\n        // 停止全部計時器\r\n        this.destroyed();\r\n        // 再開啟計時器\r\n        this.timer.timer1 = setInterval(() => {\r\n          this.getMatchPlay();\r\n        }, 30000);\r\n        this.countDownTime = 30;\r\n        this.countDown();\r\n      }\r\n\r\n      // 今日\r\n      if (this.tab2) {\r\n        // 停止全部計時器\r\n        this.destroyed();\r\n        // 再開啟計時器\r\n        this.timer.timer2 = setInterval(() => {\r\n          this.getMatchPlay();\r\n        }, 30000);\r\n        this.countDownTime = 30;\r\n        this.countDown();\r\n      }\r\n\r\n      // 滾球\r\n      if (this.tab3) {\r\n        // 停止全部計時器\r\n        this.destroyed();\r\n        // 再開啟計時器\r\n        this.timer.timer3 = setInterval(() => {\r\n          this.getMatchPlay();\r\n        }, 2000);\r\n      }\r\n    },\r\n    // 倒數計時\r\n    countDown() {\r\n      this.countDownTimer = setInterval(() => {\r\n        if (this.countDownTime <= 0) {\r\n          this.countDownTime = 30;\r\n        }\r\n        this.countDownTime = this.countDownTime - 1;\r\n      }, 1000);\r\n    },\r\n    // 手動刷新\r\n    refresh() {\r\n      this.getMatchPlay();\r\n      this.cycling();\r\n\r\n      let vm = this;\r\n        const m = vm.$message({\r\n          message: this.$t(\"RefreshedSuccessfully\"),\r\n          duration: 3000,\r\n          type: \"success\",\r\n          center: true\r\n        });\r\n        setTimeout(() => {m.close()}, 2000);\r\n    },\r\n    // 停止全部計時器\r\n    destroyed() {\r\n      clearInterval(this.timer.timer1);\r\n      clearInterval(this.timer.timer2);\r\n      clearInterval(this.timer.timer3);\r\n      clearInterval(this.countDownTimer);\r\n    },\r\n\r\n    // 新賠率\r\n    async newChangeOdds() {\r\n      if (this.playId == -1) {\r\n        return;\r\n      }\r\n      let data = {\r\n        playId: this.playId,\r\n        betType: 1\r\n      };\r\n      await apiGetBetResponse(data, true).then(res => {\r\n        if (res.Code === 600) {\r\n          this.$message({\r\n            message: res.Message,\r\n            duration: 3000,\r\n            type: \"error\",\r\n            center: true\r\n          });\r\n        } else {\r\n          this.betinfo = res;\r\n          this.newOdds = this.betinfo.OddsValue;\r\n        }\r\n      });\r\n    },\r\n\r\n    closeOddsChange() {\r\n      this.getMatchPlay();\r\n      this.showbet = false;\r\n      this.IsOddsChange = false;\r\n    },\r\n\r\n    // 廣告結束時傳回的值\r\n    finishedAd(bool) {\r\n      this.isFinished = bool;\r\n    }\r\n  },\r\n\r\n  // 跳出本頁時 vue hook(生命週期)\r\n  destroyed() {\r\n    clearInterval(this.timer.timer1);\r\n    clearInterval(this.timer.timer2);\r\n    clearInterval(this.timer.timer3);\r\n    clearInterval(this.countDownTimer);\r\n  }\r\n};\r\n",null]}