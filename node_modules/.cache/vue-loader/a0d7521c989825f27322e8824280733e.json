{"remainingRequest":"C:\\work\\竞猜可换色板\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\work\\竞猜可换色板\\src\\views\\club\\CreateClubSet.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\work\\竞猜可换色板\\src\\views\\club\\CreateClubSet.vue","mtime":1597307616559},{"path":"C:\\work\\竞猜可换色板\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\work\\竞猜可换色板\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\work\\竞猜可换色板\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\work\\竞猜可换色板\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport back from \"@/components/Botton/back.vue\";\r\n// import { apiGetMissionList, apiAddMission, apiReceiveMissionReward } from \"@/api/mission.js\";\r\nimport { apiGetMatchs } from \"@/api/match\";\r\nimport { apiClubUpload, apiMemApplyClub } from \"@/api/Club\";\r\nexport default {\r\n  components: {\r\n    back\r\n  },\r\n  data() {\r\n    return {\r\n      noMission: false,\r\n      checkList: [],\r\n      matchsList: [],\r\n      busy: false,\r\n      loading: false,\r\n      push: true,\r\n      IndexNum: 1,\r\n      noMore: false,\r\n      clubName: '',\r\n      clubSlogan: '',\r\n      upImg: false\r\n    };\r\n  },\r\n\r\n  created() {\r\n    // this.getTaskList(this.categoryType);\r\n  },\r\n  mounted() {\r\n      //   let data1 = {\r\n      //   matchTypeId: 2,\r\n      //   index: 1,\r\n      //   count: 10,\r\n      //   havaPlay: true,\r\n      //   matchItemTypeId: -1\r\n      // };\r\n      // apiGetMatchs(data1, true).then(res => {\r\n      //   console.log(res)\r\n      //   this.matchsList = res.Data;\r\n      // });\r\n  },\r\n  methods: {\r\n    creat () {\r\n      if(this.clubName == \"\"){\r\n        this.$message({\r\n          message: this.$t(\"FillYourClub\"),\r\n          type: \"error\",\r\n          center: true,\r\n          duration: 1200\r\n        });\r\n      }else if(this.clubSlogan == \"\"){\r\n        this.$message({\r\n          message: this.$t(\"FillYourClubSlogan\"),\r\n          type: \"error\",\r\n          center: true,\r\n          duration: 1200\r\n        });\r\n      }else if(this.checkList.toString() == \"\"){\r\n        this.$message({\r\n          message: this.$t(\"FillYourFavoriteEvent\"),\r\n          type: \"error\",\r\n          center: true,\r\n          duration: 1200\r\n        });\r\n      }else if(localStorage.getItem(\"imgName\") == \"\"){\r\n        this.$message({\r\n          message: this.$t(\"UploadYourClubLogo\"),\r\n          type: \"error\",\r\n          center: true,\r\n          duration: 1200\r\n        });\r\n      }else {\r\n        let memApplyClubData = {\r\n          ClubName: this.clubName,\r\n          SloganLabel: this.clubSlogan,\r\n          MatchId: this.checkList.toString()+\",\",\r\n          ClubImg: localStorage.getItem(\"imgName\"),\r\n          UName: localStorage.getItem(\"uname\")\r\n        }\r\n        apiMemApplyClub(memApplyClubData, true).then(res =>{\r\n          if(res.Success){\r\n            this.$message({\r\n              message: res.Message,\r\n              type: \"success\",\r\n              center: true,\r\n              duration: 1200\r\n            });\r\n            this.$router.push(\"/Myself\");\r\n          }else{\r\n            this.$message({\r\n              message: res.Message,\r\n              type: \"error\",\r\n              center: true,\r\n              duration: 1200\r\n            });\r\n          }\r\n        })\r\n      }\r\n    },\r\n    onLoad() {\r\n      this.busy = true;\r\n       let data1 = {\r\n        matchTypeId: 2,\r\n        index: this.IndexNum,\r\n        count: 8,\r\n        havaPlay: true,\r\n        matchItemTypeId: -1\r\n      }\r\n       apiGetMatchs(data1, true).then(res => {\r\n        if(res.Data.length == 0){\r\n          this.noMore = true\r\n          this.push = false;\r\n          return\r\n        }\r\n        for(let i = 0; res.Data.length>i; i++){\r\n          this.matchsList.push(res.Data[i])\r\n          this.busy = false;\r\n        }\r\n        this.IndexNum++\r\n       })\r\n    },\r\n    // 图片上传功能\r\n    tirggerFile (event) {\r\n      let file = event.target.files[0]\r\n      let imgSize = file.size\r\n      var param = new FormData() // 创建form对象\r\n      param.append('file', file, file.name) // 通过append向form对象添加数据\r\n      param.append('type', '1') // 添加form表单中其他数据\r\n      // console.log(param.get('file')) // FormData私有类对象，访问不到，可以通过get判断值是否传进去\r\n\r\n      if (!event.target.files.length) return\r\n      if (imgSize / 1024 > 10000) {\r\n        this.$message({\r\n          message: this.$t(\"PictureIsTooBig\"),\r\n          type: \"warning\",\r\n          center: true,\r\n          duration: 1200\r\n        });\r\n      } else {\r\n        this.imgPreview(file)\r\n      }\r\n    },\r\n\r\n    // 获取图片\r\n    imgPreview (file, callback) {\r\n      let _this = this // this指向问题，所以在外面先定义\r\n      let config = {\r\n        headers: { 'Content-Type': 'multipart/form-data' },\r\n        contentType: false, //required\r\n        processData: false // required\r\n      }\r\n      // 判断是否支持FileReader\r\n      if (!file || !window.FileReader) return\r\n      // 创建一个reader\r\n      var reader = new FileReader()\r\n      // 将图片转成base64格式\r\n      reader.readAsDataURL(file)\r\n      reader.onloadend = function () {\r\n        let result = this.result\r\n        let img = new Image()\r\n        img.src = result\r\n        // console.log('============未压缩图片===========')\r\n        img.onload = function () {\r\n          let data = _this.compress(img)\r\n\r\n          _this.imgUrl = result\r\n\r\n          let blob = _this.dataURItoBlob(data)\r\n\r\n          // console.log('*******base64转blob对象******')\r\n          let param = new FormData() // 创建form对象\r\n          param.append('file', blob, file.name) // 通过append向form对象添加数据\r\n          param.append('type', \"club\")\r\n\r\n          apiClubUpload(param, config).then(res => {\r\n            if (res.Success) {\r\n              _this.$message({\r\n                message: _this.$t(\"UploadSuccessfully\"),\r\n                type: \"success\",\r\n                center: true,\r\n                duration: 1200\r\n              });\r\n              //顯示圖片\r\n              _this.upImg = true\r\n              document.querySelector('#demo').setAttribute('src', result);\r\n              localStorage.setItem(\"imgName\", file.name)\r\n            }else {\r\n              _this.$message({\r\n                message: _this.$t(\"UploadFailed\"),\r\n                type: \"error\",\r\n                center: true,\r\n                duration: 1200\r\n              });\r\n            }\r\n          })\r\n        }\r\n      }\r\n    },\r\n    // 压缩图片\r\n    compress (img) {\r\n      let canvas = document.createElement('canvas')\r\n      let ctx = canvas.getContext('2d')\r\n      // let initSize = img.src.length\r\n      let width = img.width\r\n      let height = img.height\r\n      canvas.width = width\r\n      canvas.height = height\r\n      // 铺底色\r\n      ctx.fillStyle = '#fff'\r\n      ctx.fillRect(0, 0, canvas.width, canvas.height)\r\n      ctx.drawImage(img, 0, 0, width, height)\r\n\r\n      // 进行最小压缩\r\n      let ndata = canvas.toDataURL('image/jpeg', 0.1)\r\n      // console.log('*******压缩后的图片大小*******')\r\n      return ndata\r\n    },\r\n    dataURItoBlob (base64Data) {\r\n      var byteString\r\n      if (base64Data.split(',')[0].indexOf('base64') >= 0) byteString = atob(base64Data.split(',')[1])\r\n      else byteString = unescape(base64Data.split(',')[1])\r\n      var mimeString = base64Data\r\n        .split(',')[0]\r\n        .split(':')[1]\r\n        .split(';')[0]\r\n      var ia = new Uint8Array(byteString.length)\r\n      for (var i = 0; i < byteString.length; i++) {\r\n        ia[i] = byteString.charCodeAt(i)\r\n      }\r\n      return new Blob([ia], { type: mimeString })\r\n    }\r\n  },\r\n  destroyed() {\r\n    localStorage.setItem(\"imgName\",\"\")\r\n  }\r\n};\r\n",{"version":3,"sources":["CreateClubSet.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyfile":"CreateClubSet.vue","sourceRoot":"src/views/club","sourcesContent":["<template>\r\n  <main class=\"createClubSet\">\r\n    <div class=\"createClubRule-header\" style=\"position:fixed;top: 0\">\r\n      <back class=\"back-icon img-he\"></back>\r\n      <h3>{{ $t(\"CreateClub\") }}</h3>\r\n    </div>\r\n\r\n    <div class=\"club-Box\">\r\n      <div class=\"noMissionBg\">\r\n        <img class=\"noMission\" v-if=\"noMission\" src=\"../../assets/暂无.png\" alt />\r\n        <p>{{ $t(\"NoInformation\") }}</p>\r\n      </div>\r\n      <div class=\"createSet\">\r\n        <div class=\"setField\">\r\n          <div class=\"title\">\r\n            <div class=\"title-list\"></div>\r\n            <p>\r\n              {{ $t(\"FillYourClub\") }}\r\n              <span class=\"required\">*</span>\r\n            </p>\r\n          </div>\r\n          <input type=\"text\" class=\"setInformation\" v-model=\"clubName\" />\r\n        </div>\r\n\r\n        <div class=\"setField\">\r\n          <div class=\"title\">\r\n            <div class=\"title-list\"></div>\r\n            <p>\r\n              {{ $t(\"FillYourClubSlogan\") }}\r\n              <span class=\"required\">*</span>\r\n            </p>\r\n          </div>\r\n          <input type=\"text\" class=\"setInformation\" v-model=\"clubSlogan\" />\r\n        </div>\r\n\r\n        <div class=\"setField\">\r\n          <div class=\"title\">\r\n            <div class=\"title-list\"></div>\r\n            <p>\r\n              {{ $t(\"FillYourFavoriteEvent\") }}\r\n              <span class=\"multipleChoice\">({{ $t(\"MultipleChoice\") }})</span>\r\n            </p>\r\n          </div>\r\n          <!-- <div class=\"chooseRace\">\r\n            <img src=\"../../assets/club/club-chooseLogo.png\" class=\"race\">\r\n\r\n          </div>-->\r\n          <el-checkbox-group v-model=\"checkList\" v-infinite-scroll=\"onLoad\" infinite-scroll-disabled=\"busy\">\r\n            <el-checkbox class=\"chooseRace\" v-for=\"(item,i) in matchsList\" :key=i :label=\"item.MatchId\">\r\n              <img v-if=\"item.Img\" :src=\"item.Img\" class=\"race\" />\r\n              <img v-else src=\"@/assets/instead_logo1.png\" alt=\"\" class=\"sport-main-collapse-img\">\r\n            </el-checkbox>\r\n          <div class=\"push\" v-if=\"push\" style='font-size: .24rem;text-align:center;line-height: .48rem'>{{ $t(\"WipeLoading\") }}</div>\r\n          <div class=\"noMore\" v-if=\"noMore\" style='font-size: .24rem;text-align:center;line-height: .48rem'>没有更多了</div>\r\n          </el-checkbox-group>\r\n        </div>\r\n\r\n        <div class=\"setField\">\r\n          <div class=\"title\">\r\n            <div class=\"title-list\"></div>\r\n            <p>\r\n              {{ $t(\"UploadYourClubLogo\") }}\r\n              <span class=\"required\">*</span>\r\n            </p>\r\n          </div>\r\n          <div class=\"uploadRulesBox\">\r\n            <div class=\"uploadRules\">\r\n              <div class=\"uploadRulesNumber\">1</div>\r\n              <div>{{ $t(\"UploadRuleDescription\") }}</div>\r\n            </div>\r\n            <div class=\"uploadRules\">\r\n              <div class=\"uploadRulesNumber\">2</div>\r\n              <div>{{ $t(\"UploadRuleDescription\") }}</div>\r\n            </div>\r\n          </div>\r\n          <div class=\"uploadImg\">\r\n            <div v-if=\"!upImg\" class=\"uploadIcon\"></div>\r\n            <div v-if=\"!upImg\" class=\"uploadContent\">{{ $t(\"AddPictures\") }}</div>\r\n            <img id=\"demo\" alt=\"\">\r\n            <input type=\"file\" class=\"imgInput\" name=\"saveFile\" @change=\"tirggerFile($event)\"/>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <button class=\"changeBtn\" @click=\"creat\">{{ $t(\"ConfirmSubmission\") }}</button>\r\n  </main>\r\n</template>\r\n\r\n<script>\r\nimport back from \"@/components/Botton/back.vue\";\r\n// import { apiGetMissionList, apiAddMission, apiReceiveMissionReward } from \"@/api/mission.js\";\r\nimport { apiGetMatchs } from \"@/api/match\";\r\nimport { apiClubUpload, apiMemApplyClub } from \"@/api/Club\";\r\nexport default {\r\n  components: {\r\n    back\r\n  },\r\n  data() {\r\n    return {\r\n      noMission: false,\r\n      checkList: [],\r\n      matchsList: [],\r\n      busy: false,\r\n      loading: false,\r\n      push: true,\r\n      IndexNum: 1,\r\n      noMore: false,\r\n      clubName: '',\r\n      clubSlogan: '',\r\n      upImg: false\r\n    };\r\n  },\r\n\r\n  created() {\r\n    // this.getTaskList(this.categoryType);\r\n  },\r\n  mounted() {\r\n      //   let data1 = {\r\n      //   matchTypeId: 2,\r\n      //   index: 1,\r\n      //   count: 10,\r\n      //   havaPlay: true,\r\n      //   matchItemTypeId: -1\r\n      // };\r\n      // apiGetMatchs(data1, true).then(res => {\r\n      //   console.log(res)\r\n      //   this.matchsList = res.Data;\r\n      // });\r\n  },\r\n  methods: {\r\n    creat () {\r\n      if(this.clubName == \"\"){\r\n        this.$message({\r\n          message: this.$t(\"FillYourClub\"),\r\n          type: \"error\",\r\n          center: true,\r\n          duration: 1200\r\n        });\r\n      }else if(this.clubSlogan == \"\"){\r\n        this.$message({\r\n          message: this.$t(\"FillYourClubSlogan\"),\r\n          type: \"error\",\r\n          center: true,\r\n          duration: 1200\r\n        });\r\n      }else if(this.checkList.toString() == \"\"){\r\n        this.$message({\r\n          message: this.$t(\"FillYourFavoriteEvent\"),\r\n          type: \"error\",\r\n          center: true,\r\n          duration: 1200\r\n        });\r\n      }else if(localStorage.getItem(\"imgName\") == \"\"){\r\n        this.$message({\r\n          message: this.$t(\"UploadYourClubLogo\"),\r\n          type: \"error\",\r\n          center: true,\r\n          duration: 1200\r\n        });\r\n      }else {\r\n        let memApplyClubData = {\r\n          ClubName: this.clubName,\r\n          SloganLabel: this.clubSlogan,\r\n          MatchId: this.checkList.toString()+\",\",\r\n          ClubImg: localStorage.getItem(\"imgName\"),\r\n          UName: localStorage.getItem(\"uname\")\r\n        }\r\n        apiMemApplyClub(memApplyClubData, true).then(res =>{\r\n          if(res.Success){\r\n            this.$message({\r\n              message: res.Message,\r\n              type: \"success\",\r\n              center: true,\r\n              duration: 1200\r\n            });\r\n            this.$router.push(\"/Myself\");\r\n          }else{\r\n            this.$message({\r\n              message: res.Message,\r\n              type: \"error\",\r\n              center: true,\r\n              duration: 1200\r\n            });\r\n          }\r\n        })\r\n      }\r\n    },\r\n    onLoad() {\r\n      this.busy = true;\r\n       let data1 = {\r\n        matchTypeId: 2,\r\n        index: this.IndexNum,\r\n        count: 8,\r\n        havaPlay: true,\r\n        matchItemTypeId: -1\r\n      }\r\n       apiGetMatchs(data1, true).then(res => {\r\n        if(res.Data.length == 0){\r\n          this.noMore = true\r\n          this.push = false;\r\n          return\r\n        }\r\n        for(let i = 0; res.Data.length>i; i++){\r\n          this.matchsList.push(res.Data[i])\r\n          this.busy = false;\r\n        }\r\n        this.IndexNum++\r\n       })\r\n    },\r\n    // 图片上传功能\r\n    tirggerFile (event) {\r\n      let file = event.target.files[0]\r\n      let imgSize = file.size\r\n      var param = new FormData() // 创建form对象\r\n      param.append('file', file, file.name) // 通过append向form对象添加数据\r\n      param.append('type', '1') // 添加form表单中其他数据\r\n      // console.log(param.get('file')) // FormData私有类对象，访问不到，可以通过get判断值是否传进去\r\n\r\n      if (!event.target.files.length) return\r\n      if (imgSize / 1024 > 10000) {\r\n        this.$message({\r\n          message: this.$t(\"PictureIsTooBig\"),\r\n          type: \"warning\",\r\n          center: true,\r\n          duration: 1200\r\n        });\r\n      } else {\r\n        this.imgPreview(file)\r\n      }\r\n    },\r\n\r\n    // 获取图片\r\n    imgPreview (file, callback) {\r\n      let _this = this // this指向问题，所以在外面先定义\r\n      let config = {\r\n        headers: { 'Content-Type': 'multipart/form-data' },\r\n        contentType: false, //required\r\n        processData: false // required\r\n      }\r\n      // 判断是否支持FileReader\r\n      if (!file || !window.FileReader) return\r\n      // 创建一个reader\r\n      var reader = new FileReader()\r\n      // 将图片转成base64格式\r\n      reader.readAsDataURL(file)\r\n      reader.onloadend = function () {\r\n        let result = this.result\r\n        let img = new Image()\r\n        img.src = result\r\n        // console.log('============未压缩图片===========')\r\n        img.onload = function () {\r\n          let data = _this.compress(img)\r\n\r\n          _this.imgUrl = result\r\n\r\n          let blob = _this.dataURItoBlob(data)\r\n\r\n          // console.log('*******base64转blob对象******')\r\n          let param = new FormData() // 创建form对象\r\n          param.append('file', blob, file.name) // 通过append向form对象添加数据\r\n          param.append('type', \"club\")\r\n\r\n          apiClubUpload(param, config).then(res => {\r\n            if (res.Success) {\r\n              _this.$message({\r\n                message: _this.$t(\"UploadSuccessfully\"),\r\n                type: \"success\",\r\n                center: true,\r\n                duration: 1200\r\n              });\r\n              //顯示圖片\r\n              _this.upImg = true\r\n              document.querySelector('#demo').setAttribute('src', result);\r\n              localStorage.setItem(\"imgName\", file.name)\r\n            }else {\r\n              _this.$message({\r\n                message: _this.$t(\"UploadFailed\"),\r\n                type: \"error\",\r\n                center: true,\r\n                duration: 1200\r\n              });\r\n            }\r\n          })\r\n        }\r\n      }\r\n    },\r\n    // 压缩图片\r\n    compress (img) {\r\n      let canvas = document.createElement('canvas')\r\n      let ctx = canvas.getContext('2d')\r\n      // let initSize = img.src.length\r\n      let width = img.width\r\n      let height = img.height\r\n      canvas.width = width\r\n      canvas.height = height\r\n      // 铺底色\r\n      ctx.fillStyle = '#fff'\r\n      ctx.fillRect(0, 0, canvas.width, canvas.height)\r\n      ctx.drawImage(img, 0, 0, width, height)\r\n\r\n      // 进行最小压缩\r\n      let ndata = canvas.toDataURL('image/jpeg', 0.1)\r\n      // console.log('*******压缩后的图片大小*******')\r\n      return ndata\r\n    },\r\n    dataURItoBlob (base64Data) {\r\n      var byteString\r\n      if (base64Data.split(',')[0].indexOf('base64') >= 0) byteString = atob(base64Data.split(',')[1])\r\n      else byteString = unescape(base64Data.split(',')[1])\r\n      var mimeString = base64Data\r\n        .split(',')[0]\r\n        .split(':')[1]\r\n        .split(';')[0]\r\n      var ia = new Uint8Array(byteString.length)\r\n      for (var i = 0; i < byteString.length; i++) {\r\n        ia[i] = byteString.charCodeAt(i)\r\n      }\r\n      return new Blob([ia], { type: mimeString })\r\n    }\r\n  },\r\n  destroyed() {\r\n    localStorage.setItem(\"imgName\",\"\")\r\n  }\r\n};\r\n</script>\r\n"]}]}