{"remainingRequest":"C:\\work\\竞猜可换色板\\node_modules\\thread-loader\\dist\\cjs.js!C:\\work\\竞猜可换色板\\node_modules\\babel-loader\\lib\\index.js!C:\\work\\竞猜可换色板\\src\\api\\api.config.js","dependencies":[{"path":"C:\\work\\竞猜可换色板\\src\\api\\api.config.js","mtime":1604908051079},{"path":"C:\\work\\竞猜可换色板\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\work\\竞猜可换色板\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\work\\竞猜可换色板\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import axios from \"axios\";\nimport { showFullScreenLoading, tryHideFullScreenLoading } from \"./loading\";\nimport router from \"../router\";\nimport { MessageBox } from \"element-ui\";\nimport { apiLogin, apiRefreshToken } from \"@/api/User\";\nimport i18n from \"@/lang\"; // 語言切換\n\nfunction debounce(fn, wait) {\n  var timerId = null;\n  var flag = true;\n  return function () {\n    clearTimeout(timerId);\n\n    if (flag) {\n      fn.apply(this, arguments);\n      flag = false;\n    }\n\n    timerId = setTimeout(function () {\n      flag = true;\n    }, wait);\n  };\n}\n\nvar authError = debounce(function (message) {\n  localStorage.removeItem(\"token\");\n  MessageBox.alert(i18n.t(\"LoginTimedOutPrompt\"), i18n.t(\"LoginTimeout\"), {\n    // center: true,\n    confirmButtonText: i18n.t(\"JumpToLoginPage\"),\n    callback: function callback(action) {\n      router.push(\"/\");\n    }\n  });\n}, 1000);\nvar service = axios.create({\n  baseURL: process.env.VUE_APP_API_BASE_URL,\n  timeout: 5000,\n  headers: {\n    \"content-type\": \"application/json\"\n  }\n}); // axios攔截器設定\n\nservice.interceptors.request.use(function (config) {\n  // if (!config.noLoading) {\n  //   // 不需要loading畫面\n  // }\n  // showFullScreenLoading()\n  // 語言\n  config.headers[\"Accept-Language\"] = JSON.parse(localStorage.getItem(\"lang\")).tag;\n  return config;\n}, function (error) {\n  return Promise.reject(error);\n}); // axios攔截器設定\n\nservice.interceptors.response.use(function (response) {\n  if (response.data.result === 0) {\n    Message.error(response.data.message);\n  } // tryHideFullScreenLoading()\n\n\n  return response.data;\n}, function (error) {\n  if (error.response.status === 401) {\n    // localStorage.removeItem(\"token\");\n    // MessageBox.alert(\"登录信息超时,请重新登录\", \"登录超时\", {\n    //   // center: true,\n    //   confirmButtonText: \"跳转到登录页\",\n    //   callback: action => {\n    //     router.push(\"/\");\n    //   }\n    // });\n    authError();\n  }\n\n  Promise.reject(error);\n});\n/**\r\n * @param url api網址\r\n * @param data 資料\r\n * @param needAuth 是否需要送token\r\n * @param noLoaging 是否需要loading\r\n */\n\nexport function post(url, data, needAuth) {\n  var noLoaging = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n\n  if (needAuth) {\n    return service.post(url, data, {\n      noLoaging: noLoaging,\n      headers: {\n        authorization: \"Bearer \" + localStorage.token\n      }\n    });\n  } else {\n    return service.post(url, data);\n  }\n}\n/**\r\n * @param url api網址\r\n * @param params 資料\r\n * @param needAuth 是否需要送token\r\n */\n\nexport function get(url, params, needAuth) {\n  if (needAuth) {\n    return service.get(url, {\n      params: params,\n      headers: {\n        authorization: \"Bearer \" + localStorage.token\n      }\n    });\n  } else {\n    return service.get(url, {\n      params: params\n    });\n  }\n}",null]}