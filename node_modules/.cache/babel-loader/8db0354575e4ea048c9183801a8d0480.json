{"remainingRequest":"C:\\Users\\Yang\\Desktop\\新增資料夾\\竞猜可换色板\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\Yang\\Desktop\\新增資料夾\\竞猜可换色板\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Yang\\Desktop\\新增資料夾\\竞猜可换色板\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Yang\\Desktop\\新增資料夾\\竞猜可换色板\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Yang\\Desktop\\新增資料夾\\竞猜可换色板\\src\\components\\roundTurntable.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Yang\\Desktop\\新增資料夾\\竞猜可换色板\\src\\components\\roundTurntable.vue","mtime":1604631041679},{"path":"C:\\Users\\Yang\\Desktop\\新增資料夾\\竞猜可换色板\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Yang\\Desktop\\新增資料夾\\竞猜可换色板\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Yang\\Desktop\\新增資料夾\\竞猜可换色板\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Yang\\Desktop\\新增資料夾\\竞猜可换色板\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Yang\\Desktop\\新增資料夾\\竞猜可换色板\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.fill\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  name: \"round-turntable\",\n  Mounted: function Mounted() {\n    this.init();\n  },\n  props: {\n    prizeData: {\n      required: true\n    },\n    rotateCircle: {\n      default: 6\n    },\n    turntableStyleOption: {\n      default: function _default() {\n        return {\n          // 背景色\n          prizeBgColors: [\"#AE3EFF\", \"#4D3FFF\", \"#FC262C\", \"#3A8BFF\", \"#EE7602\", \"#FE339F\"],\n          // 转盘的外边框颜色\n          borderColor: \"#199301\"\n        };\n      }\n    },\n    duringTime: {\n      default: 4.5\n    }\n  },\n  data: function data() {\n    return {\n      // 开始转动的角度\n      startRotateDegree: 0,\n      rotateAngle: 0,\n      rotateTransition: \"\"\n    };\n  },\n  methods: {\n    // 根据index计算每一格要旋转的角度的样式\n    getRotateAngle: function getRotateAngle(index) {\n      var angle = 360 / this.prizeData.length * index + 180 / this.prizeData.length;\n      return {\n        transform: \"rotate(\".concat(angle, \"deg)\")\n      };\n    },\n    // 初始化圆形转盘canvas\n    init: function init() {\n      // 各种数据\n      var data = this.turntableStyleOption;\n      var prizeNum = this.prizeData.length;\n      var prizeBgColors = data.prizeBgColors,\n          borderColor = data.borderColor; // 开始绘画\n\n      var canvas = this.$refs.canvas;\n      var ctx = canvas.getContext(\"2d\");\n      var canvasW = this.$refs.canvas.width = this.$refs.turntable.clientWidth; // 画板的高度\n\n      var canvasH = this.$refs.canvas.height = this.$refs.turntable.clientHeight; // 画板的宽度\n      // translate方法重新映射画布上的 (0,0) 位置\n\n      ctx.translate(0, canvasH); // rotate方法旋转当前的绘图，因为文字适合当前扇形中心线垂直的！\n\n      ctx.rotate(-90 * Math.PI / 180); // 圆环的外圆的半径\n\n      var outRadius = canvasW / 2; // 圆环的内圆的半径\n\n      var innerRadius = 0;\n      var baseAngle = Math.PI * 2 / prizeNum; // 计算每个奖项所占角度数\n\n      ctx.clearRect(0, 0, canvasW, canvasH); //去掉背景默认的黑色\n\n      ctx.strokeStyle = borderColor; // 设置画图线的颜色\n\n      for (var index = 0; index < prizeNum; index++) {\n        var angle = index * baseAngle;\n        ctx.fillStyle = prizeBgColors[index]; //设置每个扇形区域的颜色\n\n        ctx.beginPath(); //开始绘制\n        // 标准圆弧：arc(x,y,radius,startAngle,endAngle,anticlockwise)\n\n        ctx.arc(canvasW * 0.5, canvasH * 0.5, outRadius, angle, angle + baseAngle, false);\n        ctx.arc(canvasW * 0.5, canvasH * 0.5, innerRadius, angle + baseAngle, angle, true);\n        ctx.stroke(); //开始链线\n\n        ctx.fill(); //填充颜色\n\n        ctx.save(); //保存当前环境的状态\n      }\n    },\n    // 转动起来\n    rotate: function rotate(index) {\n      var _this = this;\n\n      // 运转时长\n      var duringTime = this.duringTime;\n      var rotateAngle = this.startRotateDegree + this.rotateCircle * 360 + 360 - (180 / this.prizeData.length + 360 / this.prizeData.length * index) - this.startRotateDegree % 360;\n      this.startRotateDegree = rotateAngle;\n      this.rotateAngle = \"rotate(\".concat(rotateAngle, \"deg)\");\n      this.rotateTransition = \"transform \".concat(duringTime, \"s cubic-bezier(0.250, 0.460, 0.455, 0.995)\");\n      setTimeout(function () {\n        _this.$emit(\"endRotation\");\n      }, duringTime * 1000 + 500);\n    }\n  }\n};",null]}