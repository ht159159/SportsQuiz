{"remainingRequest":"C:\\Users\\Yang\\Desktop\\新增資料夾\\竞猜可换色板\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\Yang\\Desktop\\新增資料夾\\竞猜可换色板\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Yang\\Desktop\\新增資料夾\\竞猜可换色板\\src\\store\\modules\\match.js","dependencies":[{"path":"C:\\Users\\Yang\\Desktop\\新增資料夾\\竞猜可换色板\\src\\store\\modules\\match.js","mtime":1609234294990},{"path":"C:\\Users\\Yang\\Desktop\\新增資料夾\\竞猜可换色板\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Yang\\Desktop\\新增資料夾\\竞猜可换色板\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Yang\\Desktop\\新增資料夾\\竞猜可换色板\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\Yang\\\\Desktop\\\\\\u65B0\\u589E\\u8CC7\\u6599\\u593E\\\\\\u7ADE\\u731C\\u53EF\\u6362\\u8272\\u677F\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/asyncToGenerator\";\n//match请求\nimport { apiGetMatchTypes, apiGetMatchs, apiGetMatch, apiGetMatchItemAndMainPlay, apiGetHistoryMatchList, apiGetMatchItemAndSpecialPlay, apiGetChallenge } from \"@/api/match.js\";\nvar match = {\n  state: {\n    MatchType: [],\n    Matchs: [],\n    MatchId: \"\",\n    rankmatchlist: [],\n    Matchitems: [],\n    MatchName: \"\",\n    MatchSpecial: [],\n    ChallengeId: 1,\n    TotalPages: \"\",\n    time: \"\",\n    lefttab: true,\n    righttab: false,\n    bgc1: false,\n    titlenum: -1,\n    loading: false,\n    comparisonMatchitems: []\n  },\n  mutations: {\n    uptitlenum: function uptitlenum(state, payload) {\n      state.titlenum = payload.id;\n    },\n    uptime: function uptime(state, payload) {\n      state.time = payload.slice(0, payload.indexOf(\"T\"));\n    },\n    upChallengeId: function upChallengeId(state, payload) {\n      state.ChallengeId = payload;\n    },\n    upMatchitems: function upMatchitems(state, payload) {\n      state.Matchitems = payload;\n    },\n    upComparisonMatchitems: function upComparisonMatchitems(state, payload) {\n      state.comparisonMatchitems = payload;\n    },\n    upRankmatchlist: function upRankmatchlist(state, payload) {\n      state.rankmatchlist = payload;\n    },\n    upMatchType: function upMatchType(state, payload) {\n      state.MatchType = payload;\n    },\n    //排位赛赛事\n    upMatchId: function upMatchId(state, payload) {\n      state.MatchId = payload.id;\n    },\n    //正常赛事 赛事id和赛事名字\n    upMatchid: function upMatchid(state, payload) {\n      state.MatchId = payload.MatchId;\n      state.MatchName = payload.MatchName;\n    },\n    //赛事\n    upMatchs: function upMatchs(state, payload) {\n      state.Matchs = payload.Matchs;\n      state.TotalPages = payload.page;\n    },\n    //特殊赛事\n    upMatchSpecial: function upMatchSpecial(state, payload) {\n      state.MatchSpecial = payload;\n    },\n    upBoolen: function upBoolen(state, payload) {\n      state.lefttab = payload.test11;\n      state.righttab = payload.test22;\n      state.bgc1 = payload.bgc1;\n    },\n    uploading: function uploading(state, payload) {\n      state.loading = payload;\n    }\n  },\n  actions: {\n    asyncChallengeid: function asyncChallengeid(context, payload) {\n      apiGetChallenge(\"\", true).then(function (res) {\n        context.commit(\"upChallengeId\", res.challengeId);\n      });\n    },\n    asyncgetMatchType: function asyncgetMatchType(context, payload) {\n      apiGetMatchTypes(payload).then(function (res) {\n        context.commit(\"upMatchType\", res.Data);\n      });\n    },\n    asyncgetMatchList: function asyncgetMatchList(context, payload) {\n      apiGetMatchs(payload).then(function (res) {\n        context.commit(\"upMatchs\", {\n          Matchs: res.Data,\n          page: res.TotalPages\n        });\n      });\n    },\n    //获取单个赛事\n    asyncgetMatch: function asyncgetMatch(context, payload) {\n      var data = {\n        matchId: context.state.MatchId\n      };\n      apiGetMatch(data).then(function (res) {});\n    },\n    //赛事玩法\n    asyncGetMatchplay: function () {\n      var _asyncGetMatchplay = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee(context, payload) {\n        var data;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                data = {\n                  matchId: context.state.MatchId,\n                  matchItemType: payload.id,\n                  index: 1,\n                  count: 100\n                };\n                _context.next = 3;\n                return apiGetMatchItemAndMainPlay(data, true).then(function (res) {\n                  // 確認主隊在TeamMatchItemViewModels裡面排在第0個位置，怕後端資料排序不統一，因為HTML那邊是固定抓TeamMatchItemViewModels[1]為主隊\n                  if (res.Data) {\n                    var teamAry = res.Data;\n                    var ComparisonMatchitems; //比較的資料\n\n                    teamAry.forEach(function (el) {\n                      if (el.TeamMatchItemViewModels[0].IsHome == false) {\n                        var newAry = el.TeamMatchItemViewModels.shift(0);\n                        el.TeamMatchItemViewModels.push(newAry);\n                      }\n                    });\n\n                    if (context.state.Matchitems != []) {\n                      // context.commit(\"upOldMatchitems\", context.state.Matchitems);\n                      context.commit(\"upComparisonMatchitems\", teamAry);\n                      ComparisonMatchitems = context.state.Matchitems;\n\n                      for (var i = 0; ComparisonMatchitems.length > i; i++) {\n                        for (var j = 0; teamAry.length > j; j++) {\n                          if (ComparisonMatchitems[i].MatchItemId == teamAry[j].MatchItemId) {\n                            //   console.log(ComparisonMatchitems[i].MatchItemId)\n                            for (var c = 0; ComparisonMatchitems[i].CommonPlayViewModelGroups.length > c; c++) {\n                              for (var cc = 1; ComparisonMatchitems[i].CommonPlayViewModelGroups[c].length > cc; cc++) {\n                                //判斷內容是否有一樣，不一樣才開始比較\n                                // console.log(j)\n                                // console.log(c)\n                                // console.log(teamAry)\n                                // console.log(teamAry[j])\n                                // console.log(teamAry[j].CommonPlayViewModelGroups[c])\n                                // console.log(teamAry[j].CommonPlayViewModelGroups[c][2])\n                                // console.log(teamAry[j].CommonPlayViewModelGroups[c][2].PlayId)\n                                // console.log(ComparisonMatchitems[i])\n                                // console.log(ComparisonMatchitems[i].CommonPlayViewModelGroups[c])\n                                // console.log(ComparisonMatchitems[i].CommonPlayViewModelGroups[c][2])\n                                if (teamAry[j].CommonPlayViewModelGroups[c] != undefined && ComparisonMatchitems[j].CommonPlayViewModelGroups[c] != undefined) {\n                                  if (teamAry[j].CommonPlayViewModelGroups[c][cc].PlayId != -1 && ComparisonMatchitems[i].CommonPlayViewModelGroups[c][cc].Text != teamAry[j].CommonPlayViewModelGroups[c][cc].Text) {\n                                    //比較2者大小 大是2 小是3\n                                    teamAry[j].CommonPlayViewModelGroups[c][cc].Text.split(\" \")[1] > ComparisonMatchitems[j].CommonPlayViewModelGroups[c][cc].Text.split(\" \")[1] ? ComparisonMatchitems[j].CommonPlayViewModelGroups[c][cc].compare = 2 : teamAry[j].CommonPlayViewModelGroups[c][cc].Text.split(\" \")[1] < ComparisonMatchitems[j].CommonPlayViewModelGroups[c][cc].Text.split(\" \")[1] ? ComparisonMatchitems[j].CommonPlayViewModelGroups[c][cc].compare = 3 : ComparisonMatchitems[j].CommonPlayViewModelGroups[c][cc].compare = 1;\n                                    context.commit(\"upComparisonMatchitems\", ComparisonMatchitems);\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n\n                      context.commit(\"upMatchitems\", teamAry);\n                    } else {\n                      context.commit(\"upComparisonMatchitems\", teamAry);\n                      context.commit(\"upMatchitems\", teamAry);\n                    }\n\n                    context.commit(\"upMatchitems\", teamAry);\n\n                    if (res) {\n                      context.commit(\"uploading\", false);\n                    }\n\n                    if (res.Data.length == 0) {\n                      return 3;\n                    }\n                  }\n                });\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function asyncGetMatchplay(_x, _x2) {\n        return _asyncGetMatchplay.apply(this, arguments);\n      }\n\n      return asyncGetMatchplay;\n    }(),\n    // 更多赛事玩法\n    asyncGetMatchMorePlay: function asyncGetMatchMorePlay(context, payload) {\n      var data = {\n        playTypeList: payload.data.playTypeList,\n        matchItemType: payload.data.matchItemType,\n        matchId: context.state.MatchId,\n        index: 1,\n        count: 10\n      };\n      apiGetMatchItemAndSpecialPlay(data, true).then(function (res) {\n        if (res) {\n          context.commit(\"uploading\", false);\n        }\n\n        context.commit(\"upMatchSpecial\", res.Data);\n      });\n    },\n    //排行榜\n    asyncGetHistoryMatchList: function asyncGetHistoryMatchList(context, payload) {\n      apiGetHistoryMatchList(\"\", true).then(function (res) {\n        context.commit(\"upRankmatchlist\", res.Data);\n      });\n    }\n  }\n};\nexport default match;",null]}