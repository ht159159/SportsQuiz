{"remainingRequest":"C:\\work\\竞猜可换色板\\node_modules\\thread-loader\\dist\\cjs.js!C:\\work\\竞猜可换色板\\node_modules\\babel-loader\\lib\\index.js!C:\\work\\竞猜可换色板\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\work\\竞猜可换色板\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\work\\竞猜可换色板\\src\\views\\Challenge\\challengeHome.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\work\\竞猜可换色板\\src\\views\\Challenge\\challengeHome.vue","mtime":1604629973686},{"path":"C:\\work\\竞猜可换色板\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\work\\竞猜可换色板\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\work\\竞猜可换色板\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\work\\竞猜可换色板\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\work\\竞猜可换色板\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.match\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport NavBottom from \"@/components/Main/NavBottom.vue\";\nimport { apiGetChallengeIsCanGoOn, apiGetChallenge, apiGetChallengeMatchList, apiGetChallengeCumulativeReward, apiGetChallengeMatchByRandom } from \"@/api/match\";\nexport default {\n  components: {\n    NavBottom: NavBottom\n  },\n  created: function created() {\n    this.getChallengeIsCanGoOn();\n    this.getYear();\n    this.getChallenge(); // this.getmatch();\n\n    this.getreward(); // this.isHaveMatch();\n  },\n  data: function data() {\n    return {\n      age: [{\n        num: 12,\n        eng: \"January\"\n      }, {\n        num: 11,\n        eng: \"November\"\n      }, {\n        num: 10,\n        eng: \"October\"\n      }, {\n        num: 9,\n        eng: \"September\"\n      }, {\n        num: 8,\n        eng: \"August\"\n      }, {\n        num: 7,\n        eng: \"July\"\n      }, {\n        num: 6,\n        eng: \"June\"\n      }, {\n        num: 5,\n        eng: \"May\"\n      }, {\n        num: 4,\n        eng: \"April\"\n      }, {\n        num: 3,\n        eng: \"March\"\n      }, {\n        num: 2,\n        eng: \"February\"\n      }, {\n        num: 1,\n        eng: \"December\"\n      }],\n      goOnType: \"\",\n      challengeInfo: \"\",\n      year: \"\",\n      value: 1,\n      match: [],\n      id: \"\",\n      matchitem: \"\",\n      activeNames: \"\",\n      showcontent: false,\n      item: \"\",\n      offset: 10,\n      loading: false,\n      finished: false,\n      index: 1,\n      page: \"\",\n      Jump: true,\n      ftext: \"\",\n      ShowExplain: false\n    };\n  },\n  methods: {\n    showPopup: function showPopup() {\n      this.ShowExplain = true;\n    },\n    hideExplain: function hideExplain() {\n      this.ShowExplain = false;\n    },\n    initialization: function initialization() {\n      this.match = [];\n      this.index = 1;\n      this.loading = true; //下拉加载中\n\n      this.finished = false; //下拉结束\n\n      if (this.loading) {\n        this.onLoad();\n      }\n    },\n    onLoad: function onLoad() {\n      var _this = this;\n\n      this.ftext = this.$t('WipeNomore');\n      var data = {\n        year: this.year,\n        index: this.index,\n        count: 10\n      };\n      apiGetChallengeMatchList(data, true).then(function (res) {\n        _this.page = res.TotalPages;\n\n        if (res.Data.length == 0) {\n          _this.match = \"\";\n          _this.ftext = \"\";\n          _this.finished = true;\n          _this.loading = false;\n          return;\n        }\n\n        if (res.Data.length > 0) {\n          _this.index++;\n\n          for (var i = 0; i < res.Data.length; i++) {\n            _this.match.push(res.Data[i]);\n          }\n\n          _this.loading = false;\n\n          if (_this.page == _this.index - 1) {\n            _this.finished = true;\n            return;\n          }\n\n          return;\n        }\n      });\n    },\n    // 判断是否有比赛\n    isHaveMatch: function isHaveMatch() {\n      var _this2 = this;\n\n      apiGetChallengeMatchByRandom(\"\", true).then(function (res) {\n        if (res.data.Data.length == 0) {\n          _this2.Jump = false;\n        }\n      });\n    },\n    getreward: function getreward() {\n      var _this3 = this;\n\n      apiGetChallengeCumulativeReward(\"\", true).then(function (res) {\n        _this3.item = res;\n      });\n    },\n    getmatch: function getmatch() {},\n    handleChange: function handleChange(value, id, time) {\n      this.$router.push(\"/challengerecord\");\n      this.$store.commit(\"upChallengeId\", value);\n      this.$store.commit(\"uptime\", time);\n    },\n    add: function add() {\n      this.year++;\n      this.initialization();\n    },\n    lose: function lose() {\n      this.year--;\n      this.initialization();\n    },\n    goJump: function goJump(id) {\n      this.$router.push(\"/challengemouth/\".concat(id));\n    },\n    //挑战赛是否进行\n    getChallengeIsCanGoOn: function getChallengeIsCanGoOn() {\n      var _this4 = this;\n\n      apiGetChallengeIsCanGoOn(\"\", true).then(function (res) {\n        _this4.goOnType = res.GoOnType;\n      });\n    },\n    getYear: function getYear() {\n      var date = new Date();\n      this.year = date.getFullYear();\n    },\n    //获得挑战赛\n    getChallenge: function getChallenge() {\n      var _this5 = this;\n\n      apiGetChallenge(\"\", true).then(function (res) {\n        _this5.challengeInfo = res.availableIntegral;\n      });\n      this.$store.dispatch(\"asyncChallengeid\"); // this.$store.commit(\"upChallengeId\", {\n      //   id: this.challengeInfo.ChallengeId\n      // });\n      // apiGetChallengeMatchByRandom(\"\", true).then(res => {\n      // });\n    },\n    // IsCanBuyChallengeTicket() {\n    //   let data = {\n    //     challengeType: 1\n    //   };\n    //   apiIsCanBuyChallengeTicket(data, true).then(res => {\n    //   });\n    // },\n    gojump: function gojump() {\n      if (this.goOnType == 1) {\n        this.$router.push(\"/challengeticket\");\n      }\n\n      if (this.Jump) {\n        if (this.goOnType == 3) {\n          if (this.challengeInfo.CurLevel == 1) {\n            this.$router.push(\"/challengematch\");\n          }\n\n          if (this.challengeInfo.CurLevel == 2) {\n            this.$router.push(\"/challengetwo\");\n          }\n\n          if (this.challengeInfo.CurLevel == 3) {\n            this.$router.push(\"/challengethree\");\n          }\n\n          if (this.challengeInfo.CurLevel == 4) {\n            this.$router.push(\"/challengefour\");\n          }\n\n          if (this.challengeInfo.CurLevel == 5) {\n            this.$router.push(\"/challengefive\");\n          }\n        }\n      } else {\n        this.$message({\n          message: this.$t('GameMaintenance'),\n          duration: 3000,\n          type: \"error\",\n          center: true\n        });\n      } // apiGetChallengeIsCanGoOn(\"\", true).then(res => {\n      // });\n      // this.$router.push(\"/challengematch\");\n\n    }\n  }\n};",null]}