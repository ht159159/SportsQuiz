{"remainingRequest":"C:\\work\\竞猜可换色板\\node_modules\\babel-loader\\lib\\index.js!C:\\work\\竞猜可换色板\\src\\store\\modules\\match.js","dependencies":[{"path":"C:\\work\\竞猜可换色板\\src\\store\\modules\\match.js","mtime":1605606721492},{"path":"C:\\work\\竞猜可换色板\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\work\\竞猜可换色板\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"C:\\\\work\\\\\\u7ADE\\u731C\\u53EF\\u6362\\u8272\\u677F\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/asyncToGenerator\";\n//match请求\nimport { apiGetMatchTypes, apiGetMatchs, apiGetMatch, apiGetMatchItemAndMainPlay, apiGetHistoryMatchList, apiGetMatchItemAndSpecialPlay, apiGetChallenge } from \"@/api/match.js\";\nvar match = {\n  state: {\n    MatchType: [],\n    Matchs: [],\n    MatchId: \"\",\n    rankmatchlist: [],\n    Matchitems: [],\n    MatchName: \"\",\n    MatchSpecial: [],\n    ChallengeId: 1,\n    TotalPages: \"\",\n    time: \"\",\n    lefttab: true,\n    righttab: false,\n    bgc1: false,\n    titlenum: -1,\n    loading: false\n  },\n  mutations: {\n    uptitlenum: function uptitlenum(state, payload) {\n      state.titlenum = payload.id;\n    },\n    uptime: function uptime(state, payload) {\n      state.time = payload.slice(0, payload.indexOf(\"T\"));\n    },\n    upChallengeId: function upChallengeId(state, payload) {\n      state.ChallengeId = payload;\n    },\n    upMatchitems: function upMatchitems(state, payload) {\n      state.Matchitems = payload;\n    },\n    upRankmatchlist: function upRankmatchlist(state, payload) {\n      state.rankmatchlist = payload;\n    },\n    upMatchType: function upMatchType(state, payload) {\n      state.MatchType = payload;\n    },\n    //排位赛赛事\n    upMatchId: function upMatchId(state, payload) {\n      state.MatchId = payload.id;\n    },\n    //正常赛事 赛事id和赛事名字\n    upMatchid: function upMatchid(state, payload) {\n      state.MatchId = payload.MatchId;\n      state.MatchName = payload.MatchName;\n    },\n    //赛事\n    upMatchs: function upMatchs(state, payload) {\n      state.Matchs = payload.Matchs;\n      state.TotalPages = payload.page;\n    },\n    //特殊赛事\n    upMatchSpecial: function upMatchSpecial(state, payload) {\n      state.MatchSpecial = payload;\n    },\n    upBoolen: function upBoolen(state, payload) {\n      state.lefttab = payload.test11;\n      state.righttab = payload.test22;\n      state.bgc1 = payload.bgc1;\n    },\n    uploading: function uploading(state, payload) {\n      state.loading = payload;\n    }\n  },\n  actions: {\n    asyncChallengeid: function asyncChallengeid(context, payload) {\n      apiGetChallenge(\"\", true).then(function (res) {\n        context.commit(\"upChallengeId\", res.challengeId);\n      });\n    },\n    asyncgetMatchType: function asyncgetMatchType(context, payload) {\n      apiGetMatchTypes(payload).then(function (res) {\n        context.commit(\"upMatchType\", res.Data);\n      });\n    },\n    asyncgetMatchList: function asyncgetMatchList(context, payload) {\n      apiGetMatchs(payload).then(function (res) {\n        context.commit(\"upMatchs\", {\n          Matchs: res.Data,\n          page: res.TotalPages\n        });\n      });\n    },\n    //获取单个赛事\n    asyncgetMatch: function asyncgetMatch(context, payload) {\n      var data = {\n        matchId: context.state.MatchId\n      };\n      apiGetMatch(data).then(function (res) {});\n    },\n    //赛事玩法\n    asyncGetMatchplay: function () {\n      var _asyncGetMatchplay = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee(context, payload) {\n        var data;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                data = {\n                  matchId: context.state.MatchId,\n                  matchItemType: payload.id,\n                  index: 1,\n                  count: 100\n                };\n                _context.next = 3;\n                return apiGetMatchItemAndMainPlay(data, true).then(function (res) {\n                  // 確認主隊在TeamMatchItemViewModels裡面排在第0個位置，怕後端資料排序不統一，因為HTML那邊是固定抓TeamMatchItemViewModels[1]為主隊\n                  var teamAry = res.Data;\n                  teamAry.forEach(function (el) {\n                    if (el.TeamMatchItemViewModels[0].IsHome == false) {\n                      var newAry = el.TeamMatchItemViewModels.shift(0);\n                      el.TeamMatchItemViewModels.push(newAry);\n                    }\n                  });\n                  context.commit(\"upMatchitems\", teamAry);\n\n                  if (res) {\n                    context.commit(\"uploading\", false);\n                  }\n\n                  if (res.Data.length == 0) {\n                    return 3;\n                  }\n                });\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function asyncGetMatchplay(_x, _x2) {\n        return _asyncGetMatchplay.apply(this, arguments);\n      }\n\n      return asyncGetMatchplay;\n    }(),\n    // 更多赛事玩法\n    asyncGetMatchMorePlay: function asyncGetMatchMorePlay(context, payload) {\n      var data = {\n        playTypeList: payload.data.playTypeList,\n        matchItemType: payload.data.matchItemType,\n        matchId: context.state.MatchId,\n        index: 1,\n        count: 10\n      };\n      apiGetMatchItemAndSpecialPlay(data, true).then(function (res) {\n        if (res) {\n          context.commit(\"uploading\", false);\n        }\n\n        context.commit(\"upMatchSpecial\", res.Data);\n      });\n    },\n    //排行榜\n    asyncGetHistoryMatchList: function asyncGetHistoryMatchList(context, payload) {\n      apiGetHistoryMatchList(\"\", true).then(function (res) {\n        context.commit(\"upRankmatchlist\", res.Data);\n      });\n    }\n  }\n};\nexport default match;",{"version":3,"sources":["C:\\work\\竞猜可换色板\\src\\store\\modules\\match.js"],"names":["apiGetMatchTypes","apiGetMatchs","apiGetMatch","apiGetMatchItemAndMainPlay","apiGetHistoryMatchList","apiGetMatchItemAndSpecialPlay","apiGetChallenge","match","state","MatchType","Matchs","MatchId","rankmatchlist","Matchitems","MatchName","MatchSpecial","ChallengeId","TotalPages","time","lefttab","righttab","bgc1","titlenum","loading","mutations","uptitlenum","payload","id","uptime","slice","indexOf","upChallengeId","upMatchitems","upRankmatchlist","upMatchType","upMatchId","upMatchid","upMatchs","page","upMatchSpecial","upBoolen","test11","test22","uploading","actions","asyncChallengeid","context","then","res","commit","challengeId","asyncgetMatchType","Data","asyncgetMatchList","asyncgetMatch","data","matchId","asyncGetMatchplay","matchItemType","index","count","teamAry","forEach","el","TeamMatchItemViewModels","IsHome","newAry","shift","push","length","asyncGetMatchMorePlay","playTypeList","asyncGetHistoryMatchList"],"mappings":"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","sourcesContent":["//match请求\r\nimport {\r\n    apiGetMatchTypes,\r\n    apiGetMatchs,\r\n    apiGetMatch,\r\n    apiGetMatchItemAndMainPlay,\r\n    apiGetHistoryMatchList,\r\n    apiGetMatchItemAndSpecialPlay,\r\n    apiGetChallenge\r\n} from \"@/api/match.js\";\r\n\r\nconst match = {\r\n    state: {\r\n        MatchType: [],\r\n        Matchs: [],\r\n        MatchId: \"\",\r\n        rankmatchlist: [],\r\n        Matchitems: [],\r\n        MatchName: \"\",\r\n        MatchSpecial: [],\r\n        ChallengeId: 1,\r\n        TotalPages: \"\",\r\n        time: \"\",\r\n        lefttab: true,\r\n        righttab: false,\r\n        bgc1: false,\r\n        titlenum: -1,\r\n        loading: false\r\n    },\r\n    mutations: {\r\n        uptitlenum(state, payload) {\r\n            state.titlenum = payload.id;\r\n        },\r\n        uptime(state, payload) {\r\n            state.time = payload.slice(0, payload.indexOf(\"T\"));\r\n        },\r\n        upChallengeId(state, payload) {\r\n            state.ChallengeId = payload;\r\n        },\r\n        upMatchitems(state, payload) {\r\n            state.Matchitems = payload;\r\n        },\r\n        upRankmatchlist(state, payload) {\r\n            state.rankmatchlist = payload;\r\n        },\r\n        upMatchType(state, payload) {\r\n            state.MatchType = payload;\r\n        },\r\n        //排位赛赛事\r\n        upMatchId(state, payload) {\r\n            state.MatchId = payload.id;\r\n        },\r\n        //正常赛事 赛事id和赛事名字\r\n        upMatchid(state, payload) {\r\n            state.MatchId = payload.MatchId;\r\n            state.MatchName = payload.MatchName;\r\n        },\r\n        //赛事\r\n        upMatchs(state, payload) {\r\n            state.Matchs = payload.Matchs;\r\n            state.TotalPages = payload.page;\r\n        },\r\n        //特殊赛事\r\n        upMatchSpecial(state, payload) {\r\n            state.MatchSpecial = payload;\r\n        },\r\n        upBoolen(state, payload) {\r\n            state.lefttab = payload.test11;\r\n            state.righttab = payload.test22;\r\n            state.bgc1 = payload.bgc1;\r\n        },\r\n        uploading(state, payload) {\r\n            state.loading = payload;\r\n        }\r\n    },\r\n    actions: {\r\n        asyncChallengeid(context, payload) {\r\n            apiGetChallenge(\"\", true).then(res => {\r\n                context.commit(\"upChallengeId\", res.challengeId);\r\n            });\r\n        },\r\n        asyncgetMatchType(context, payload) {\r\n            apiGetMatchTypes(payload).then(res => {\r\n                context.commit(\"upMatchType\", res.Data);\r\n            });\r\n        },\r\n        asyncgetMatchList(context, payload) {\r\n            apiGetMatchs(payload).then(res => {\r\n                context.commit(\"upMatchs\", {\r\n                    Matchs: res.Data,\r\n                    page: res.TotalPages\r\n                });\r\n            });\r\n        },\r\n        //获取单个赛事\r\n        asyncgetMatch(context, payload) {\r\n            let data = {\r\n                matchId: context.state.MatchId\r\n            };\r\n\r\n            apiGetMatch(data).then(res => {});\r\n        },\r\n        //赛事玩法\r\n        async asyncGetMatchplay(context, payload) {\r\n            let data = {\r\n                matchId: context.state.MatchId,\r\n                matchItemType: payload.id,\r\n                index: 1,\r\n                count: 100\r\n            };\r\n            await apiGetMatchItemAndMainPlay(data, true).then(res => {\r\n                // 確認主隊在TeamMatchItemViewModels裡面排在第0個位置，怕後端資料排序不統一，因為HTML那邊是固定抓TeamMatchItemViewModels[1]為主隊\r\n                let teamAry = res.Data\r\n                teamAry.forEach(el => {\r\n                    if (el.TeamMatchItemViewModels[0].IsHome == false) {\r\n                        let newAry =  el.TeamMatchItemViewModels.shift(0);\r\n                        el.TeamMatchItemViewModels.push(newAry)\r\n                    }\r\n                });\r\n                context.commit(\"upMatchitems\", teamAry);\r\n                if (res) {\r\n                    context.commit(\"uploading\", false);\r\n                }\r\n                if (res.Data.length == 0) {\r\n                    return 3;\r\n                }\r\n            });\r\n        },\r\n        // 更多赛事玩法\r\n        asyncGetMatchMorePlay(context, payload) {\r\n            let data = {\r\n                playTypeList: payload.data.playTypeList,\r\n                matchItemType: payload.data.matchItemType,\r\n                matchId: context.state.MatchId,\r\n                index: 1,\r\n                count: 10\r\n            };\r\n            apiGetMatchItemAndSpecialPlay(data, true).then(res => {\r\n                if (res) {\r\n                    context.commit(\"uploading\", false);\r\n                }\r\n                context.commit(\"upMatchSpecial\", res.Data);\r\n            });\r\n        },\r\n        //排行榜\r\n        asyncGetHistoryMatchList(context, payload) {\r\n            apiGetHistoryMatchList(\"\", true).then(res => {\r\n                context.commit(\"upRankmatchlist\", res.Data);\r\n            });\r\n        }\r\n    }\r\n};\r\n\r\nexport default match;"]}]}