{"remainingRequest":"C:\\work\\竞猜可换色板\\node_modules\\thread-loader\\dist\\cjs.js!C:\\work\\竞猜可换色板\\node_modules\\babel-loader\\lib\\index.js!C:\\work\\竞猜可换色板\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\work\\竞猜可换色板\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\work\\竞猜可换色板\\src\\views\\RankMatch.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\work\\竞猜可换色板\\src\\views\\RankMatch.vue","mtime":1605599793563},{"path":"C:\\work\\竞猜可换色板\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\work\\竞猜可换色板\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\work\\竞猜可换色板\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\work\\竞猜可换色板\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\work\\竞猜可换色板\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"C:\\\\work\\\\\\u7ADE\\u731C\\u53EF\\u6362\\u8272\\u677F\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport \"core-js/modules/es6.regexp.match\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport NavBottom from \"@/components/Main/NavBottom.vue\";\nimport back from \"../components/Botton/back.vue\";\nimport model from \"../components/model\";\nimport { betSuccess } from \"@/utils/medias\";\nimport FlowAd from \"@/components/FlowAd\";\nimport { apiGetBetResponse, apiBet, apiGetMemberMatchViewModel } from \"../api/match.js\";\nimport { apiGetFlowAdByType } from \"@/api/FlowAd.js\";\nexport default {\n  watch: {\n    betnum: function betnum() {\n      if (this.betinfo.PlayType == 3 || this.betinfo.PlayType == 4 || this.betinfo.PlayType == 5 || this.betinfo.PlayType == 6) {\n        this.money = (this.betnum * this.betinfo.OddsValue).toFixed(2);\n      } else {\n        this.money = (this.betnum * this.betinfo.OddsValue - this.betnum).toFixed(2);\n      }\n\n      this.rangeValue = parseInt(this.betnum);\n    }\n  },\n  components: {\n    NavBottom: NavBottom,\n    back: back,\n    model: model,\n    FlowAd: FlowAd\n  },\n  created: function created() {\n    this.getMatchPlay();\n    this.getrankmatchinfo();\n    this.cycling();\n  },\n  data: function data() {\n    return {\n      tab1: true,\n      tab2: false,\n      tab3: false,\n      show: false,\n      showbet: false,\n      betnum: 0,\n      rangeValue: 0,\n      rangeMaxVal: 0,\n      money: \"\",\n      playtype: 0,\n      playId: \"\",\n      betinfo: \"\",\n      rankinfo: \"\",\n      fastnum: \"\",\n      IsOddsChange: false,\n      lastOdds: \"\",\n      newOdds: \"\",\n      timer: {\n        timer1: \"\",\n        timer2: \"\",\n        timer3: \"\"\n      },\n      countDownTimer: \"\",\n      countDownTime: 30,\n      qualifyingMinBet: 1,\n      isOpenAd: false,\n      adTypeId: 0,\n      isFinished: false\n    };\n  },\n  methods: {\n    fastbet: function fastbet(id) {\n      this.fastnum = id;\n      this.betnum = id;\n    },\n    getrankmatchinfo: function getrankmatchinfo() {\n      var _this = this;\n\n      var data = {\n        matchId: this.$store.state.match.MatchId\n      };\n      apiGetMemberMatchViewModel(data, true).then(function (res) {\n        _this.rankinfo = res;\n      });\n    },\n    gojump: function gojump(id) {\n      this.$router.push(\"/matchmore\");\n    },\n    //关闭下注\n    closedialog: function closedialog() {\n      this.showbet = false;\n    },\n    //下注界面\n    showBetFn: function showBetFn(id) {\n      var _this2 = this;\n\n      this.betnum = 0; // if (id > 0) {\n      //   this.showbet = true;\n      // }\n\n      this.playId = id;\n\n      if (this.playId == -1) {\n        return;\n      }\n\n      var data = {\n        playId: id,\n        betType: 1\n      };\n      apiGetBetResponse(data, true).then(function (res) {\n        if (res.Code === 600) {\n          _this2.$message({\n            message: res.Message,\n            duration: 3000,\n            type: \"error\",\n            center: true\n          });\n        } else {\n          _this2.showbet = true;\n          _this2.betinfo = res; // 上次的舊賠率\n\n          _this2.lastOdds = _this2.betinfo.OddsValue; // 投注金額預設最低投注金額\n\n          _this2.betnum = _this2.qualifyingMinBet;\n          _this2.rangeValue = _this2.betnum; // 判斷最大單筆投注金額回傳是否為-1 如是拉桿的最大值為10000\n\n          if (res.MaxBetIntegral === -1) _this2.rangeMaxVal = 10000;else _this2.rangeMaxVal = res.MaxBetIntegral; // 判斷玩家餘額大於最大可投注額時，滾動條最大值設為最大可投注額\n\n          if (_this2.betinfo.AvailableIntegral > _this2.rangeMaxVal) {\n            _this2.rangeMaxVal = 10000;\n            _this2.isDisable = false;\n            return;\n          } // 判斷玩家餘額小於最小可投注額時，指针放置在开始位置显示最小可投注额 且不可拖动\n\n\n          if (_this2.betinfo.AvailableIntegral < _this2.betinfo.MinBetIntegral) {\n            _this2.isDisable = true;\n            return;\n          } // 判斷玩家餘額小於最大可投注額時，滾動條最大值設為玩家餘額\n\n\n          if (_this2.betinfo.AvailableIntegral < _this2.rangeMaxVal) {\n            _this2.rangeMaxVal = _this2.betinfo.AvailableIntegral;\n            _this2.isDisable = false;\n            return;\n          }\n        }\n      });\n    },\n    changeRangeVal: function changeRangeVal() {\n      this.betnum = this.rangeValue;\n      var tooltip = document.querySelector(\".slide-tooltip\");\n      var rangeBtn = document.querySelector(\".el-slider__bar\");\n      var tooltipWidth = tooltip.getBoundingClientRect().width; // 提示框最正確的寬度\n\n      var rangeBtnOffset = rangeBtn.offsetWidth; // 拖動拉桿時拉桿條的偏移量\n\n      var rangeBtnOffsetParent = rangeBtn.offsetParent.offsetLeft; // 拉桿條離父層左邊(父層padding-left)的偏移量\n\n      var tolerance = tooltipWidth / 2 + (rangeBtnOffsetParent - tooltipWidth); // 公差\n\n      if (!this.isrunTwice) {\n        tooltip.style.left = tolerance + \"px\";\n        this.isrunTwice = true;\n      } else {\n        tooltip.style.left = rangeBtnOffset + tolerance + \"px\";\n      }\n    },\n    //投注金额\n    addbet: function addbet() {\n      this.betnum = this.betnum + 1;\n    },\n    losebet: function losebet() {\n      if (this.betnum == 0) {\n        return;\n      }\n\n      this.betnum = this.betnum - 1;\n    },\n    //可赢金额\n    getmoney1: function getmoney1() {// this.money = this.betnum * this.betinfo.OddsValue;\n      // this.money = this.money.toFixed(2);\n    },\n    // 點擊下注時判斷\n    betClick: function betClick() {\n      var _this3 = this;\n\n      this.newChangeOdds().then(function () {\n        // 如果兩個賠率不同\n        if (_this3.lastOdds !== _this3.newOdds) {\n          _this3.showbet = false;\n          _this3.IsOddsChange = true;\n\n          _this3.getMatchPlay();\n        } else {\n          _this3.bet();\n        }\n      });\n    },\n    //下注\n    bet: function () {\n      var _bet = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        var _this4 = this;\n\n        var data;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                data = {\n                  playId: this.playId,\n                  betIntegral: this.betnum,\n                  betType: 2\n                };\n\n                if (!(this.betnum >= 1)) {\n                  _context.next = 6;\n                  break;\n                }\n\n                _context.next = 4;\n                return apiBet(data, true).then(function (res) {\n                  if (res.IsBetSucceed) {\n                    _this4.$message({\n                      message: _this4.$t(\"BettingSuccess\"),\n                      duration: 2500,\n                      type: \"success\",\n                      center: true\n                    }); // this.Alert.showMsg(\"下注成功\", \"success\", 2500, true, true);\n\n\n                    _this4.showbet = false;\n\n                    _this4.getrankmatchinfo();\n\n                    _this4.fastnum = \"\"; // 下注成功音效\n\n                    betSuccess.play(); // 彈出廣告\n\n                    _this4.adTypeId = 2;\n                    var _data = {\n                      flowAdTypeId: _this4.adTypeId\n                    };\n                    apiGetFlowAdByType(_data, true).then(function (res) {\n                      if (Object.keys(res.Data).length > 0) {\n                        _this4.isOpenAd = true;\n                      } else {\n                        _this4.isOpenAd = false;\n                      }\n                    });\n                    _this4.isFinished = false;\n                  } else if (res.Code == 600) {\n                    _this4.$message({\n                      message: res.Message,\n                      duration: 1000,\n                      type: \"error\",\n                      center: true\n                    });\n\n                    if (res.Message == \"余额不足\") {\n                      // 彈出廣告\n                      setTimeout(function () {\n                        _this4.isOpenAd = true;\n                        _this4.adTypeId = 2;\n                      }, 1000);\n                      _this4.showbet = false;\n                    }\n                  }\n                });\n\n              case 4:\n                _context.next = 7;\n                break;\n\n              case 6:\n                this.$message.error(\"投注金额需要大于1元\");\n\n              case 7:\n                // 刷新API\n                this.getMatchPlay();\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function bet() {\n        return _bet.apply(this, arguments);\n      }\n\n      return bet;\n    }(),\n    //获取赛事玩法\n    getMatchPlay: function getMatchPlay() {\n      this.$store.dispatch(\"asyncGetMatchplay\", {\n        id: this.playtype\n      });\n    },\n    tabshow1: function tabshow1(id) {\n      this.$store.commit(\"uploading\", true);\n      this.playtype = id;\n      this.tab1 = true;\n      this.tab2 = false;\n      this.tab3 = false;\n      this.getMatchPlay();\n      this.cycling();\n    },\n    tabshow2: function tabshow2(id) {\n      this.$store.commit(\"uploading\", true);\n      this.playtype = id;\n      this.tab1 = false;\n      this.tab2 = true;\n      this.tab3 = false;\n      this.getMatchPlay();\n      this.cycling();\n    },\n    tabshow3: function tabshow3(id) {\n      this.$store.commit(\"uploading\", true);\n      this.playtype = id;\n      this.tab1 = false;\n      this.tab2 = false;\n      this.tab3 = true;\n      this.getMatchPlay();\n      this.cycling();\n    },\n    cycling: function cycling() {\n      var _this5 = this;\n\n      // 早盤\n      if (this.tab1) {\n        // 停止全部計時器\n        this.destroyed(); // 再開啟計時器\n\n        this.timer.timer1 = setInterval(function () {\n          _this5.getMatchPlay();\n        }, 30000);\n        this.countDownTime = 30;\n        this.countDown();\n      } // 今日\n\n\n      if (this.tab2) {\n        // 停止全部計時器\n        this.destroyed(); // 再開啟計時器\n\n        this.timer.timer2 = setInterval(function () {\n          _this5.getMatchPlay();\n        }, 30000);\n        this.countDownTime = 30;\n        this.countDown();\n      } // 滾球\n\n\n      if (this.tab3) {\n        // 停止全部計時器\n        this.destroyed(); // 再開啟計時器\n\n        this.timer.timer3 = setInterval(function () {\n          _this5.getMatchPlay();\n        }, 2000);\n      }\n    },\n    // 倒數計時\n    countDown: function countDown() {\n      var _this6 = this;\n\n      this.countDownTimer = setInterval(function () {\n        if (_this6.countDownTime <= 0) {\n          _this6.countDownTime = 30;\n        }\n\n        _this6.countDownTime = _this6.countDownTime - 1;\n      }, 1000);\n    },\n    // 手動刷新\n    refresh: function refresh() {\n      this.getMatchPlay();\n      this.cycling();\n      var vm = this;\n      var m = vm.$message({\n        message: this.$t(\"RefreshedSuccessfully\"),\n        duration: 3000,\n        type: \"success\",\n        center: true\n      });\n      setTimeout(function () {\n        m.close();\n      }, 2000);\n    },\n    // 停止全部計時器\n    destroyed: function destroyed() {\n      clearInterval(this.timer.timer1);\n      clearInterval(this.timer.timer2);\n      clearInterval(this.timer.timer3);\n      clearInterval(this.countDownTimer);\n    },\n    // 新賠率\n    newChangeOdds: function () {\n      var _newChangeOdds = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2() {\n        var _this7 = this;\n\n        var data;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!(this.playId == -1)) {\n                  _context2.next = 2;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\");\n\n              case 2:\n                data = {\n                  playId: this.playId,\n                  betType: 1\n                };\n                _context2.next = 5;\n                return apiGetBetResponse(data, true).then(function (res) {\n                  if (res.Code === 600) {\n                    _this7.$message({\n                      message: res.Message,\n                      duration: 3000,\n                      type: \"error\",\n                      center: true\n                    });\n                  } else {\n                    _this7.betinfo = res;\n                    _this7.newOdds = _this7.betinfo.OddsValue;\n                  }\n                });\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function newChangeOdds() {\n        return _newChangeOdds.apply(this, arguments);\n      }\n\n      return newChangeOdds;\n    }(),\n    closeOddsChange: function closeOddsChange() {\n      this.getMatchPlay();\n      this.showbet = false;\n      this.IsOddsChange = false;\n    },\n    // 廣告結束時傳回的值\n    finishedAd: function finishedAd(bool) {\n      this.isFinished = bool;\n    }\n  },\n  // 跳出本頁時 vue hook(生命週期)\n  destroyed: function destroyed() {\n    clearInterval(this.timer.timer1);\n    clearInterval(this.timer.timer2);\n    clearInterval(this.timer.timer3);\n    clearInterval(this.countDownTimer);\n  }\n};",null]}