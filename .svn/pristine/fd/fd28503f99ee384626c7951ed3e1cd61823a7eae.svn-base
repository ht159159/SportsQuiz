<template>
  <main
    class="gameRes"
    v-cloak
  >
    <div class="gameRes-header">
      <back
        class="back-icon"
        style="margin-top: .4rem"
      ></back>
      <h3>{{ $t('Result') }}</h3>  <!-- 【 比赛结果 】 -->
    </div>
    <div class="gameRes-content">
      <div class="searchBox">
        <input class="searchInput" type="text" id="fname" name="fname" :placeholder='$t("SearchPlaceholder")' v-model="searchValue">
        <div class="searchBtn" for="fname" @click="search()"></div>
      </div>
      <ul
        class="contentUl"
        v-cloak
      >
        <li
          style="margin-left: .2rem"
          :class="{ active: num == index }"
          @click="getNumL(item.MatchTypeId, index)"
          v-for="(item, index) in $store.state.match.MatchType"
          :key="item.index"
        >
          {{ item.MatchTypeName }}
          <span class="heng"></span>
          <span
            class="lineH"
            v-show="num == index"
          ></span>
        </li>
      </ul>
    </div>
    <div
      class="soprtList"
      v-cloak
    >
      <ul
        v-show="num === Pindex"
        v-cloak
      >
        <van-list
          class="sport-main-collapses"
          v-if="matchs"
          v-cloak
          v-model="loading"
          :finished="finished"
          @load="onLoad"
          :finished-text="ftext"
          :offset="offsetnum"
        >
          <div class="sport-main-collapse" v-for="(item, index) in msgList" :key="index" @click="showitems(item.MatchId, item.MatchName)">
            <img v-if="item.Img" class="sport-main-collapse-img" :src="item.Img">
            <img v-else src="@/assets/instead_logo1.png" alt="" class="sport-main-collapse-img">
            <div class="sport-main-collapse-name">{{ item.MatchName }}</div>
            <div class="sport-main-collapse-icon"></div>
          </div>
          <div class="nomatchs" v-if="$store.state.match.Matchs.length === 0 || msgList.length == 0 && loading == false">
            <p>{{ $t("NoMatch") }}</p>  <!-- 【 暂无赛事 】 -->
          </div>
        </van-list>

        <li
          class="soprtList-ul-item"
          v-for="(item, index) in MatchItems"
          :key="index"
          v-show="items"
          v-cloak
        >
          <p class="soprtList-ul-item-p">
            <img
              class="soprtList-ul-item-p-img"
              src="@/assets/timer_03.png"
              alt=""
            />
            <span class="soprtList-ul-item-p-span">
              {{ item.DateTime }}
            </span>
          </p>
          <div class="soprtList-ul-item-div">
            <p class="sP">{{ MatchName }}</p>
            <div class="sContent">
              <p class="hong">
                <span class="hong-span">{{ item.HomeTeamName }}</span>
              </p>
              <img
                class="imgVs"
                src="@/assets/myself/vsgame_03.png"
                alt=""
              />
              <p class="lan">
                <span class="lan-span">{{ item.AwayTeamName }}</span>
              </p>
            </div>
            <div class="gameFoot">
              <div class="gameFoot-left">
                <p>
                  <span>{{ $t('HalftimeScore') }}</span>  <!-- 【 半场比数 】 -->
                  <span class="gameRight">{{ $t('Score') }}</span>  <!-- 【 比数 】 -->
                </p>
                <p>
                  <span class="gameRightA"> {{ item.HHomeScore }}</span>
                  <span class="gameRightB"> {{ item.HomeScore }}</span>
                </p>
              </div>
              <div class="gameFoot-right">
                <p>
                  <span>{{ $t('HalftimeScore') }}</span>  <!-- 【 半场比数 】 -->
                  <span class="gameRight">{{ $t('Score') }}</span> <!-- 【 比数 】 -->
                </p>
                <p>
                  <span class="gameRightA">{{ item.HAwayScore }}</span>
                  <span class="gameRightB">{{ item.AwayScore }}</span>
                </p>
              </div>
            </div>
          </div>
        </li>
      </ul>
    </div>
  </main>
</template>

<script>
import { apiGetMatchResultByMatchId } from "@/api/match.js";
import { apiGetMatchs } from "@/api/match";
import back from "../../components/Botton/back.vue";
export default {
  components: {
    back
  },
  name: "gameRes",
  created () {
    this.getMatchType();
  },
  data () {
    return {
      Pindex: 0,
      num: 0,
      HalfNumLeft: 0,
      AllNumLeft: 0,
      HalfNumRight: 0,
      AllNumRight: 0,
      items: false,
      matchs: true,
      MatchItems: "",
      MatchName: "",
      cid: "",
      loading: false,
      finished: false,
      msgList: [],
      IndexNum: 1,
      ftext: "",
      offsetnum: 10,
      totalCount: "",
      totalMatchs: "",
      searchValue: ""
    };
  },
  methods: {
    onLoad () {
      setTimeout(() => {
        this.ftext = this.$t("WipeNomore");  // 【 沒有更多了 】
        let data = {
          matchTypeId:
            this.cid || this.$store.state.match.MatchType[0].MatchTypeId,
          index: this.IndexNum,
          count: 10,
          havaPlay: false,
          matchItemTypeId: -1
        };
        this.$store.dispatch("asyncgetMatchList", data);
        setTimeout(() => {
          if (this.$store.state.match.Matchs.length == 0) {
            this.msgList = this.$store.state.match.Matchs;
            this.totalCount = this.$store.state.match.TotalCount;
            this.finished = true;
            this.loading = false;
            this.ftext = "";
            return;
          }
          if (this.$store.state.match.Matchs.length == 10) {
            this.totalCount = this.$store.state.match.TotalCount;

            //獲取全部隊伍
            let totalCountData = {
            matchTypeId:
            this.cid || this.$store.state.match.MatchType[0].MatchTypeId,
            index: this.IndexNum,
            count: this.totalCount,
            havaPlay: false,
            matchItemTypeId: -1
            };
            apiGetMatchs(totalCountData, true).then((res) => {
              this.totalMatchs = res.Data;
            });
            for (let i = 0; i < this.$store.state.match.Matchs.length; i++) {
              this.msgList.push(this.$store.state.match.Matchs[i]);
            }
            this.loading = false;
            this.IndexNum++;
            if (this.$store.state.match.TotalPages == this.IndexNum - 1) {
              this.finished = true;
              return;
            }
            return;
          }
          if (
            this.$store.state.match.Matchs.length < 10 &&
            this.$store.state.match.Matchs.length > 0
          ) {
            for (let i = 0; i < this.$store.state.match.Matchs.length; i++) {
              this.msgList.push(this.$store.state.match.Matchs[i]);
            }
            this.loading = false;
            this.finished = true;
            return;
          }
        }, 500);
      }, 500);
    },

    //赛事种类
    getMatchType () {
      let data = {
        index: 1,
        count: 10
      };
      this.$store.dispatch("asyncgetMatchType", data);
    },
    goBack () {
      this.$router.go(-1);
    },
    //篮球
    getNumL (id, index) {
      this.searchValue = "";
      this.cid = id;
      this.Pindex = index;
      this.num = index;
      this.initialization();
      this.finished = false;

      this.items = false;
      this.matchs = true;
      this.MatchItems = [1];
    },
    initialization () {
      this.msgList = [];
      this.IndexNum = 1;
      this.loading = true; //下拉加载中
      this.finished = false; //下拉结束
      if (this.loading) {
        this.onLoad();
      }
    },
    pickTime () {

    },
    //赛事结果
    showitems (id, name) {
      this.$store.commit("upMatchid", {
        MatchName: name
      });
      this.$router.push({
        name: "game",
        params: {
          id,
          name
        }
      });
      
    },

    //搜寻
    search() {
      if (this.searchValue == "") {
        let vm = this;
        const m = vm.$message({
          message: this.$t("SearchTimeError"),
          duration: 3000,
          type: "error",
          center: true
        });
        setTimeout(() => {m.close()}, 2000);
        return
      }
      this.msgList = [];
      this.totalMatchs.forEach(element => {
        // element.MatchName.indexOf(this.searchValue)
        if(element.MatchName.indexOf(this.searchValue) != -1){
          this.msgList.push(element);
        };
      });
    }
  },
};
</script>
<style>
.el-date-editor.el-input,
.el-date-editor.el-input__inner {
  width: 10rem;
}
.left .el-input__inner {
  width: 3.15rem;
  height: 0.56rem;
  margin-top: 0.12rem;
  margin-left: 0.2rem;
  float: left;
  background: #f3f3f3;
  text-align: center;
  color: #676767;
}
.left .el-input__prefix {
  display: none;
}
.right .el-input__prefix {
  display: none;
}
.right .el-input__inner {
  width: 3.15rem;
  height: 0.56rem;
  margin-top: 0.12rem;
  float: right;
  margin-right: 0.2rem;
  background: #f3f3f3;
  text-align: center;
  color: #676767;
}
</style>
<style scoped>
.contentUl {
  display: flex;
  /* justify-content: space-around; */
  width: 100%;
  height: 1.06rem;
  /* line-height: 1.06rem; */

  list-style: none;
  margin: 0 auto;
  text-align: center;
  position: relative;
}
.contentUl li {
  line-height: 1.06rem;
  width: 1.07rem;
  position: relative;
}
.contentUl .te {
  line-height: 1.06rem;
  width: 1.65rem;
}
.active {
  color: #c12e3e;
  /* border-bottom: .07rem solid #c12e3e; */
}
.heng {
  float: right;
  width: 1px;
  height: 0.36rem;
  background: #d1d1d1;
  margin-top: 0.33rem;
}
.henLine {
  float: left;
  /* margin-left: 316rem; */
  margin-top: 0.38rem;
  width: 0.27rem;
  height: 0.03rem;
  background: #9f9f9f;
}
.lineH {
  position: absolute;
  display: inline-block;
  width: calc(100% - 0.05rem);
  border-radius: 0.2rem;
  height: 0.07rem;
  background: #c12e3e;
  left: 0;
  bottom: 0;
}
</style>
